<#
Will need to redefine $aglist and $agNodes. aglist has a list of AG names and their primary nodes, $agNodes gets a list of all nodes in the AG
working examples on 17,18 for non-ewa cmds
#>
$agList = Get-EwaAgInfo
$mismatches = [System.Collections.ArrayList]@()
$passwordExpirations = [System.Collections.ArrayList]@()
$sidMismatch = [System.Collections.ArrayList]@()
foreach ($ag in $agList) {
    $agNodes = Get-EwaAgReplica -ComputerName $ag.AG
    $localAccountsSIDs = @{}
    $localAccountsSANs = @{}
    Write-Host "Starting on $($ag.AG), found nodes $($agNodes.allnodes)"
    foreach ($node in $agNodes.AllNodes) {
        $accounts = Invoke-EwaSql -SQLCommand "select name,sid from sys.server_principals WHERE type = 'U'" -SQLServer $node -Database master -ErrorAction Continue | Where-Object {$_.Name -notlike "#*" -and $_.Name -notlike "sa" -and $_.Name -notlike "NT SERVICE\*"}
        $passwords = Invoke-EwaSql -SQLCommand "select name, is_expiration_checked As 'is_expiration_checked' from sys.sql_logins" -SQLServer $node -Database master -ErrorAction Continue | Where-Object {$_.Name -notlike "#*" -and $_.Name -notlike "sa" -and $_.Name -notlike "NT SERVICE\*"}
        #$accounts=Invoke-Sqlcmd -Query "select name,sid from sys.server_principals WHERE type = 'U'" -ServerInstance $node -Database master
        #$passwords=Invoke-Sqlcmd -Query "select name, is_expiration_checked As 'is_expiration_checked' from sys.sql_logins" -ServerInstance $node -Database master

        foreach ($password in $passwords){
            if ($password.is_expiration_checked -eq $true) {
                $passwordExpirations.Add("$node,$($password.name)") | Out-Null
            }
        }
        foreach ($account in $accounts) {
            $sid = ([string]$account.SID).Replace(' ','')
            $name = $account.name
            # Adding the account info into the SID table
            if ($localAccountsSIDs[$sid]) {
                $localAccountsSIDs[$sid].Add("$node,$name") | Out-Null
            } else {
                $localAccountsSIDs.Add($sid,(New-Object System.Collections.ArrayList))
                $localAccountsSIDs[$sid].Add("$node,$name") | Out-Null
            }
            # Adding the account info into the SAN table
            if ($localAccountsSANs[$name]) {
                if($localAccountsSANs[$name] -notcontains $sid) {
                    $entryReturn = $localAccountsSANs[$name].Add($sid)
                    # if entryReturn is greater than 0, it means the same account has multiple SIDs across the AG so it flags it here.
                    if($entryReturn -gt 0) {
                        $sidMismatch.Add("$node,$name") | Out-Null
                    }
                }
            } else {
                $localAccountsSANs.Add($name,(New-Object System.Collections.ArrayList))
                $localAccountsSANs[$name].Add($sid) | Out-Null
            }
        }
    }
    foreach ($sid in $localAccountsSIDs.keys) {
        if ($localAccountsSIDs[$sid].count -ne $agNodes.allNodes.count) {
            $mismatches.Add($localAccountsSIDs[$sid]) | Out-Null
        }
    }
}
# quick fix for repeat entries across SQLFARM AGs
$prunedMismatches = $mismatches | Select-Object -Unique
$prunedpasswords = $passwordExpirations | Select-Object -Unique
$prunedSidMismatch = $sidMismatch | Select-Object -Unique
if (($prunedMismatches.count -ge 1) -or ($prunedpasswords.count -ge 1) -or ($prunedSidMismatch -ge 1)) {
    #Email processing
    $BodyText =  "The following accounts were not detected on all nodes in the AG or the SID did not match,<br>"
    $BodyText +=  "or the account is configured with an expiring password ('Enforce password expiration' is checked').<br>"
    $BodyText +=  "For entries with the message 'Verify account..', the server listed is the server which has the account.<br>"
    $BodyText +=  "Use Get-EwaAgReplica or Get-EwaAgInfo to determine the missing nodes.<br>"
    $BodyText +=  "This email generated by $($MyInvocation.MyCommand.Definition) on $($env:computername)<br>Label=EWA-DBA<br>"
    $BodyText += '<br><br><table border=1><th bgcolor="#E0F8FF">Server</th><th bgcolor="#E0F8FF">Account</th><th bgcolor="#E0F8FF">Message</th>'
    $tablecolors = @{0 = '#ffffff';1 = '#cccccc'}
    
    foreach ($mismatch in $prunedMismatches) {
    #Headers: Server,Account,Message
        $BodyText += "<tr bgcolor=$($tablecolors[$LoopCounter %2])>"
        if ($mismatch.count -gt 1) {
            $servers = ''
            foreach ($elem in $mismatch) {
                $servers += $elem.Split(',')[0]
                $account = $elem.Split(',')[1]
                $servers += ','
            }
            $servers = $servers.TrimEnd(',')
            $BodyText += "<td>$($servers)</td>"
            $BodyText += "<td>$($account)</td>"
        }else {
            $data = $mismatch.Split(',')
            $server = $data[0]
            $account = $data[1]
            $BodyText += "<td>$($server)</td>"
            $BodyText += "<td>$($account)</td>"
    
        }
        $BodyText += "<td>Account not present on other AG nodes</td>"
        $BodyText += "</tr>"
    }
    
    foreach ($badPW in $prunedpasswords) {
        $server = $badPW.Split(',')[0]
        $account = $badPW.Split(',')[1]
        $BodyText += "<tr bgcolor=$($tablecolors[$LoopCounter %2])>"
        $BodyText += "<td>$($server)</td>"
        $BodyText += "<td>$($account)</td>"
        $BodyText += "<td>Account is configured with expiring password</td>"
        $BodyText += "</tr>"
    }
    
    foreach ($badSid in $prunedSidMismatch) {
        $server = $badSid.Split(',')[0]
        $account = $badSid.Split(',')[1]
        $BodyText += "<tr bgcolor=$($tablecolors[$LoopCounter %2])>"
        $BodyText += "<td>$($server)</td>"
        $BodyText += "<td>$($account)</td>"
        $BodyText += "<td>SID does not match on all AG nodes</td>"
        $BodyText += "</tr>"
    }
    
    $emailOpts = @{
        To = '' #your email here
        From = 'noreply@iu.edu'
        SMTPServer = 'mail-relay.iu.edu'
        Subject = 'SQL AG Account Audit'
        Body = $BodyText
    }
    Send-MailMessage @emailOpts -BodyAsHtml
}
##
$accounts = Invoke-EwaSql -SQLCommand "select name,sid from sys.server_principals WHERE type = 'U'" -SQLServer $node -Database master -ErrorAction Continue | Where-Object {$_.Name -notlike "#*" -and $_.Name -notlike "sa" -and $_.Name -notlike "NT SERVICE\*"}
$passwords = Invoke-EwaSql -SQLCommand "select name, is_expiration_checked As 'is_expiration_checked' from sys.sql_logins" -SQLServer $node -Database master -ErrorAction Continue | Where-Object {$_.Name -notlike "#*" -and $_.Name -notlike "sa" -and $_.Name -notlike "NT SERVICE\*"}

$accounts = Invoke-EwaSql -SQLCommand "select name,sid from sys.server_principals WHERE type = 'U'" -SQLServer $node -Database master -ErrorAction Continue | Where-Object {$_.Name -notlike "#*" -and $_.Name -notlike "sa" -and $_.Name -notlike "NT SERVICE\*"}
$passwords = Invoke-EwaSql -SQLCommand "select name, is_expiration_checked As 'is_expiration_checked' from sys.sql_logins" -SQLServer $node -Database master -ErrorAction Continue | Where-Object {$_.Name -notlike "#*" -and $_.Name -notlike "sa" -and $_.Name -notlike "NT SERVICE\*"}

$accounts=Invoke-Sqlcmd -Query "select name,sid from sys.server_principals WHERE type = 'U'" -ServerInstance $srv -Database master
$passwords=Invoke-Sqlcmd -Query "select name, is_expiration_checked As 'is_expiration_checked' from sys.sql_logins" -ServerInstance $srv -Database master