$data = [System.Collections.ArrayList]@()
$SqlServers = Get-EwaCmdbServer -isDBmssql 1 -NamesOnly


foreach ($srv in $SqlServers) {
    $connections=Get-EwaSqlInstance -Servers $srv
    #non-ewa equiv: $connections=Get-SqlInstance -inputObject $srv
    foreach ($connection in $connections){
        $accounts = invoke-ewasql -SQLCommand "select name,sid from sys.server_principals WHERE type = 'U' AND name like 'ADS%'" -SQLServer $connection.ConnectionInfo -Database master -ErrorAction Continue
        #non-ewa equiv: $accounts=Invoke-Sqlcmd -Query "select name,sid from sys.server_principals WHERE type = 'U' AND name like 'ADS%'" -ServerInstance $connection -Database master

        if ($accounts) {
            foreach ($account in $accounts) {
                #remove ads\ prefix from the username for the AD SID query
                $filteredName = $account.name.tolower().replace('ads\','')
                #convert the binary SID to a string
                $sql_sid = (New-Object System.Security.Principal.SecurityIdentifier($account.sid,0)).Value
                #getting the AD SID
                $objectSID = (Get-ADObject -LDAPFilter "(samaccountname=$filteredName)" -Properties objectSID -ErrorAction Stop).objectSID.value
                #Assume SID matches, change the message if not
                $SIDMatch = $True
                $message='SQL SID matches AD SID'
                if (($objectSID -ne $sql_sid) -and ($null -ne $objectSID)) {
                    $SIDMatch = $False
                    $message='SQL SID does not match AD SID'

                    $dataObj = [ordered]@{
                        'Name' = $account.name
                        'Server' = $connection.ConnectionInfo #$connection.DomainInstanceName ?
                        'SQL_SID' = $sql_sid
                        'AD_SID' = $objectSID
                        'Match' = $SIDMatch
                        'Message' = $message
                    }

                    $data.Add($dataObj) | Out-Null
                }
            }
            Write-Output "Finished user checks for $($connection.ConnectionInfo)"
        }         
    }
}
$date = get-date -Format yyyy-MM-dd
if ($data -gt 0) {
    #Email processing
    $BodyText =  "A comparison of the SQL SID to the AD SID did not match for the following users.<br>" #<br>Label=EWA-DBA
    $BodyText +=  "This report was generated by C:\TaskCode\Scheduled\Get-SQLSidMismatch.ps1<br>Label=EWA-DBA<br>"
    $BodyText += '<br><br><table border=1><th bgcolor="#E0F8FF">Server</th><th bgcolor="#E0F8FF">Name</th><th bgcolor="#E0F8FF">Message</th>'
    $tablecolors = @{0 = '#ffffff';1 = '#cccccc'}

    foreach ($entry in $data) {
    #Headers: Server, Name, Message
        if ($entry.Match -ne $True) {
        $BodyText += "<tr bgcolor=$($tablecolors[$LoopCounter %2])>"
        $BodyText += "<td>$($entry.Server)</td>"
        $BodyText += "<td>$($entry.Name)</td>"
        $BodyText += "<td>$($entry.Message)</td>"
        $BodyText += "</tr>"
        }
    }
    $emailOpts = @{
        To = '' #youremailhere
        From = 'noreply@iu.edu'
        SMTPServer = 'mail-relay.iu.edu'
        Subject = 'SQL Login Audit'
        Body = $BodyText

        
    }
    Send-MailMessage @emailOpts -BodyAsHtml -UseSsl
}
